/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

const Promise = require('bluebird');
const named = require('yesql').pg;

/**
 * DAOs Common functions
 */
module.exports = class GenericDAO {

    constructor(
        sqlSelectById, 
        sqlSelectAll, 
        sqlCount,
		sqlInsert, 
        sqlUpdate, 
        sqlDelete, 
        sqlExist) {
		// Load database & database configuration
        this.getDatabase = require('../../config/dbConfig');

        this.sqlSelectById = sqlSelectById;
        this.sqlSelectAll = sqlSelectAll;
        this.sqlCount = sqlCount;
		this.sqlInsert = sqlInsert;
        this.sqlUpdate = sqlUpdate;
        this.sqlDelete = sqlDelete;
        this.sqlExist = sqlExist;
    }

    /**
     * Execute the findAll query
     * @param sqlRequest
     * @returns Promise
     */
    findAll() {
        return new Promise(function (resolve, reject) {
            this.getDatabase().query(this.sqlSelectAll, function (err, result) {
                if (err) {
                    reject(err);
                } else {
                    resolve(result.rows);
                }
            });
        }.bind(this));
    }

    /**
     * Execute the findOne query
     * @param sqlRequest, sqlParams
     * @returns Promise
     */
    findOne(sqlParams) {
        return new Promise(function (resolve, reject) {
            this.getDatabase().query(named(this.sqlSelectById)(sqlParams), function (err, result) {
                if (err) {
                    reject(err);
                } else if (result.rows === null || result.rows.length === 0) {
                    resolve(null);
                } else {
                    let row = result.rows[0];
                    resolve(row);
                }
            })
        }.bind(this));
    }

    /**
     * Execute the existOne query
     * @param sqlRequest, sqlParams
     * @returns Promise
     */
    existsOne(sqlParams) {
        return new Promise((resolve, reject) => {
            this.getDatabase().query(named(this.sqlExist)(sqlParams), function (err, result) {
                if (err) {
                    reject(err);
                } else if (result.rows[0] && result.rows[0].found === true) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            })
        });
    }

    /**
     * Execute the insert query
     * @param sqlRequest, sqlParams, sqlRequest2
     * @returns Promise
     */
    insert(sqlParams) {
        return new Promise(function (resolve, reject) {
            this.getDatabase().query(named(this.sqlInsert)(sqlParams), function (err, result) {
                // Duplicate key PostgreSQL code
                let CONSTRAINT_DUPLICATE_KEY = '23505';
                if (result) {
                    resolve(result.rows[0]);
                } else {
                    if (err.code === CONSTRAINT_DUPLICATE_KEY) {
                        resolve(null);
                    } else {
                        reject(err);
                    }
                }
            });
        }.bind(this));
    }

    /**
     * Execute the update query
     * @param sqlRequest, sqlParams
     * @returns Promise
     */
    update(sqlParams) {
        return new Promise(function (resolve, reject) {
            this.getDatabase().query(named(this.sqlUpdate)(sqlParams), function (err, result) {
                if (err) {
                    reject(err);
                } else if (result && result.rows[0]) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            });
        }.bind(this));
    }

    /**
     * Execute the delete query
     * @param sqlRequest, sqlParams
     * @returns Promise
     */
    delete(sqlParams) {
        return new Promise(function (resolve, reject) {
            this.getDatabase().query(named(this.sqlDelete)(sqlParams), function (err, result) {
                if (err) {
                    reject(err);
                } else if (result) {
                    if (result.rows[0]) {
                        resolve(true);
                    } else {
                        resolve(false);
                    }
                }
            });
        }.bind(this));
    }
};